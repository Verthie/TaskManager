@model IEnumerable<TaskItem>;
@{
    ViewData["Title"] = "Home Page";
}

<h1>Task List</h1>

<div class="container">
    <div class="row justify-content-between">
        <div class="col-2 p-0">
            <a asp-action="Create" class="btn btn-primary">Create New Task</a>
        </div>
        <div class="col-2 p-0 d-flex justify-content-end">
            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Status Filter
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a asp-action="Index" asp-route-statusFilter="Complete" class="dropdown-item">Complete</a></li>
                    <li><a asp-action="Index" asp-route-statusFilter="Incomplete" class="dropdown-item">Incomplete</a></li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li><a asp-action="Index" class="dropdown-item">All</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@* <p>
    <table class="table">
        <a asp-action="Create" class="btn btn-primary">Create New Task</a>
        <a asp-action="Create" class="btn btn-primary">Create New Task</a>
    </table>
</p> *@

<table class="table table-striped">
    <thead>
        <tr>
            <th>
                Title
                @* <a asp-action="Index" asp-route-sortProperty="Title">Title</a> Sorting by Title*@
            </th>
            @* <th>Description</th> *@
            <th>
                Check
                @* <a asp-action="Index" asp-route-sortProperty="Status">Is Complete</a> Sorting by Status*@
            </th>
            <th></th>
        </tr>
    </thead>
    @foreach (TaskItem task in Model)
    {
        <tr>
            <td>@task.Title</td>
            @* <td>@task.Description</td> *@
            <td>
                @Html.AntiForgeryToken()
                <input data-id=@task.Id class="form-check-input" type="checkbox" onchange="toggleTask(event, @task.Id)" @(task.CompletionStatus ?
                                                                                                                                                "checked" : "") />
            </td>
            <td>
                @*:? Edit action expects an id parameter so we route it to the id of this model using asp-route-id *@
                <button type="button" class="btn btn-sm btn-info detailsBtn" data-task-id="@task.Id" data-toggle="modal"
                    data-target="#detailsModal">Details</button>
                <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-warning">Edit</a>
                <a asp-action="Delete" asp-route-id="@task.Id" class="btn btn-sm btn-danger">Remove</a>
                @* @if (!task.CompletionStatus) *@
                @* { *@
                    @* :* <a> is designed for navigation (GET requests) so we can't make POST requests with them *@
                    @* <a asp-action="Complete" asp-route-id="@task.Id" class="btn btn-sm btn-success">Complete</a> *@

                    @* <form asp-action="Complete" asp-route-id="@task.Id" method="post" style="display:inline;">
                        <button type="submit" class="btn btn-sm btn-success">Complete</button>
                    </form> *@
                @* } *@
            </td>
            <td>
                <span id="badge-@task.Id" class="badge @(task.CompletionStatus ? "bg-success" : "bg-secondary")">@(task.CompletionStatus ? "Complete" : "Incomplete")</span>
            </td>
        </tr>
    }
</table>

<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Task Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="detailsModalBody">
                <!-- Task details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<script>
    const timeout = function (s) {
        return new Promise(function (_, reject) {
            setTimeout(function () {
                reject(new Error(`Request took too long! Timeout after ${s} second`));
            }, s * 1000);
        });
    };

    const getData = async function (taskId) {
        const res = await Promise.race([fetch(`/Tasks/Details/${taskId}`), timeout(10)]);
        const data = await res.text();

        if (!res.ok) throw new Error(`Error (${res.status})`);
        return data;
    }

    document.addEventListener('DOMContentLoaded', function () {
        const detailsBtn = document.querySelector('.detailsBtn');
        const modalBody = document.querySelector('.modal-body');
        const modal = document.getElementById('detailsModal');

        // Attach click listener to all details buttons
        document.querySelectorAll('.detailsBtn').forEach(function (button) {
            button.addEventListener('click', function () {
                currentTaskId = button.getAttribute('data-task-id');
                // const bootstrapModal = new bootstrap.Modal(modal);
                // bootstrapModal.show();
                $('#detailsModal').modal('show')
            });
        });

        // On modal show, fetch and inject details for the selected task
        modal.addEventListener('show.bs.modal', async function () {
            if (!currentTaskId) return;

            try {
                const data = await getData(currentTaskId);
                modalBody.innerHTML = data;
            } catch (err) {
                modalBody.innerHTML = `<div class="text-danger">${err.message}</div>`;
            }
        });
    });

    const toggleTask = async function(e, id) {
        e.preventDefault();
        
        const checkbox = document.querySelector(`input[data-id="${id}"]`);
        const status = checkbox.checked;

        const formData = new URLSearchParams();
        formData.append("id", id); // same as adding an id parameter to a URL => /Tasks/Complete?id=${id}

        const res = await fetch(`/Tasks/ToggleStatus`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded', // Notice that the Content-Type is not 'application/json' (we are not POSTing json)
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: formData
        });

        if (!res.ok) alert("Failed to update task.");
        await toggleBadge(id, status);
    }

    const toggleBadge = async function(id, status) {
        // Update badge UI
        const badge = document.getElementById(`badge-${id}`);
        if (status) {
            badge.className = "badge bg-success";
            badge.innerText = "Complete";
        } else {
            badge.className = "badge bg-secondary";
            badge.innerText = "Incomplete";
        }
    }
</script>